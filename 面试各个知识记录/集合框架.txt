collection collections（提供了对集合进行排序的算法，遍历等实现）
Collection是集合类的上级接口，子接口主要有Set 和List、Map。 
Collections是针对集合类的一个帮助类，提供了操作集合的工具方法：一系列静态方法实现对各种集合的搜索、排序、线程安全化等操

Map、Set、List、Queue、Stack的特点与用法。

map是key-value的存储结构，M键Key是唯一不能重复的，一个键对应一个值，值可以重复

hashmap（线程不安全） 不能保证有序 速度比hashtable快 ，key,value值可以为空
hashtable（线程安全） 使用了synchronization ，key,value不能为空

HashMap可以通过下面的语句进行同步：
Map m = Collections.synchronizeMap(hashMap);

HashMap和ConcurrentHashMap的区别

从ConcurrentHashMap代码中可以看出，它引入了一个“分段锁”的概念，具体可以理解为把一个大的Map拆分成N个小的HashTable，根据key.hashCode()来决定把key放到哪个HashTable中
在ConcurrentHashMap中，就是把Map分成了N个Segment，put和get的时候，都是现根据key.hashCode()算出放到哪个Segment中
ConcurrentHashMap中默认是把segments初始化为长度为16的数组
以上就是ConcurrentHashMap的工作机制，通过把整个Map分为N个Segment（类似HashTable），可以提供相同的线程安全，但是效率提升N倍，默认提升16倍


在JDK1.6，JDK1.7中，HashMap采用位桶+链表实现，即使用链表处理冲突，但是当位于一个桶中的元素较多，即hash值相等的元素较多时，通过key值依次查找的效率较低

而JDK1.8中，HashMap采用位桶+链表+红黑树实现，当链表长度超过阈值（8）时，将链表转换为红黑树（O(nlogn)），这样大大减少了查找时间

set 无序不包含重复元素的集合，set中最多包含一个null元素 

--hashset
------linkshashset
--treeset


list 是有序可重复集合，并精确控制每个元素的插入位置
linklist
arraylist
vector
--stack

queue是队列 先进先出，LinkedList实现了Queue接口
使用时尽量避免add()和remove()方法,而是使用offer()来添加元素，使用poll()来移除元素

stack是栈 先进后出 
Stack继承自Vector。 
它通过五个操作对类Vector进行扩展，允许将向量视为堆栈，它提供了通常的push和pop操作，以及取堆栈顶点的peek()方法、测试堆栈是否为空的empty方法等


对于快速插入和删除元素的，建议使用LinkedList 
如果需要快速随机访问元素的，建议使用ArrayList

TreeMap、HashMap、LindedHashMap的区别
Map主要用于存储健值对，根据键得到值，因此不允许键重复(重复了覆盖了),但允许值重复。
Hashmap 是一个最常用的Map,它根据键的HashCode 值存储数据,根据键可以直接获取它的值，具有很快的访问速度，遍历时，取得数据的顺序是完全随机的。HashMap最多只允许一条记录的键为Null;允许多条记录的值为 Null;HashMap不支持线程的同步，即任一时刻可以有多个线程同时写HashMap;可能会导致数据的不一致。如果需要同步，可以用 Collections的synchronizedMap方法使HashMap具有同步的能力，或者使用ConcurrentHashMap。
Hashtable与 HashMap类似,它继承自Dictionary类，不同的是:它不允许记录的键或者值为空;它支持线程的同步，即任一时刻只有一个线程能写Hashtable,因此也导致了 Hashtable在写入时会比较慢。
LinkedHashMap保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的.也可以在构造时用带参数，按照应用次数排序。在遍历的时候会比HashMap慢，不过有种情况例外，当HashMap容量很大，实际数据较少时，遍历起来可能会比LinkedHashMap慢，因为LinkedHashMap的遍历速度只和实际数据有关，和容量无关，而HashMap的遍历速度和他的容量有关。
TreeMap实现SortMap接口，能够把它保存的记录根据键排序,默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。


hashmap 源码解析
 Map<K,V>是一种以键值对存储数据的容器，而HashMap则是借助了键值Key的hashcode值来组织存储，使得可以非常快速和高效地地根据键值key进行数据的存取。
 对于键值对<Key,Value>，HashMap内部会将其封装成一个对应的Entry<Key,Value>对象，即Entry<Key,Value>对象是键值对<Key,Value>的组织形式；
 对于每个对象而言，JVM都会为其生成一个hashcode值。HashMap在存储键值对Entry<Key,Value>的时候，会根据Key的hashcode值，以某种映射关系，
 决定应当将这对键值对Entry<Key,Value>存储在HashMap中的什么位置上；
     当通过Key值取数据的时候，然后根据Key值的hashcode，以及内部映射条件，直接定位到Key对应的Value值存放在什么位置，可以非常高效地将Value值取出。
	 
 要动态分配桶的数量，这就要求要有一个权衡的策略了，HashMap的权衡策略是这样的：
		 如果
					 HashMap的大小> HashMap的容量(即Entry[] table的大小)*加载因子(经验值0.75)
		   则
					 HashMap中的Entry[] table 的容量扩充为当前的一倍；
					然后重新将以前桶中的Entry<Key,Value>链表重新分配到各个桶中
			
默认创建的HashMap map =new HashMap();map的容量是 16，那么，当我们往 map中添加第几个完全不同的键值对<Key,Value>时，HashMap的容量会扩充呢？ 
呵呵，很简单的计算：由于默认的加载因子是0.75 ，那么，此时map的阀值是 16*0.75 = 12，即添加第13 个键值对<Key,Value>的时候，map的容量会扩充一倍。
			
put()方法-向HashMap存储键值对<Key,Value>
a.  获取这个Key的hashcode值，根据此值确定应该将这一对键值对存放在哪一个桶中，即确定要存放桶的索引；
b.  遍历所在桶中的Entry<Key,Value>链表，查找其中是否已经有了以Key值为Key存储的Entry<Key,Value>对象，
c1. 若已存在，定位到对应的Entry<Key,Value>,其中的Value值更新为新的Value值；返回旧值；
c2. 若不存在，则根据键值对<Key,Value> 创建一个新的Entry<Key,Value>对象，然后添加到这个桶的Entry<Key,Value>链表的头部。
d.  当前的HashMap的大小(即Entry<key,Value>节点的数目)是否超过了阀值，若超过了阀值(threshold)，则增大HashMap的容量(即Entry[] table 的大小)，并且重新组织内部各个Entry<Key,Value>排列。

get()方法-根据Key从HashMap中取Value
a.  获取这个Key的hashcode值，根据此hashcode值决定应该从哪一个桶中查找；
b.  遍历所在桶中的Entry<Key,Value>链表，查找其中是否已经有了以Key值为Key存储的Entry<Key,Value>对象，
c1. 若已存在，定位到对应的Entry<Key,Value>,返回value
c2. 若不存在，返回null；

try catch finally，try里有return，finally还执行么
1、不管有木有出现异常，finally块中代码都会执行；
2、当try和catch中有return时，finally仍然会执行；
3、finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以函数返回值是在finally执行前确定的；
4、finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。

