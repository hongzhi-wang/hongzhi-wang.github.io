公司内部智能办公系统

问题一 说说你的oa办公系统

因为随着公司的发展人员迅速增长，员工考勤，日志，周报，项目管理部方便，
公司决定开发OA办公系统，我荣幸是其中一员
开发过程中我主要负责
组织与用户管理模块
主要是对该公司的部门以及人员的管理。
所以在此模块中我们又分为机构管理与人员管理两个子模块。
由于该公司的机构属于职能型机构，父机构下面又存在子机构，就像一个树状结构，
所以我们在设计该模块表的时候使用了自关联的方式，这样可以减少数据库设计的允余，
也便于扩展。
而人员模块设计比较简单，就是直接在表中加入了一个机构的外键，
因为人员肯定是属于某个部门的。


权限管理模块
至于权限模块的设计就稍微复杂点。
任何一个项目都会根据需求来设计相应的权限操作，
权限也是我们保证项目健壮性的一种手段。在此模块中我们分为用户管理
，权限管理，角色管理三个子模块。因为首先我们考虑到应该为每个人员
建立一个唯一的登陆账号，我们称为用户，我们将权限不直接授予具体用户，
而是授予相应的角色，这样就可以降低耦合度
也就是说一个用户可能会被分配都多个角色，
默认情况下我们是取所有权限的合集，但也会出现角色之间权限的冲突问题，
因此我们在表中设计了一个优先级的字段，让一个用户拥有的多个角色有不同的优先级，
如果权限产生了冲突，
则以优先级高的角色为准。
有点类似我们web程序中加载servlet时候配置的load-on-startup的属性

们这个项目的权限分为三级，首先在用户登录的时候就开始验证是否有资格进入，
（这是第一级）在通过该验证后，
我们会查询出该用户拥有的所有具有可读功能的模块并展示，
对于该用户不可读的模块是不会展示出来的，
这样能避免用户的误操作（这是第二级）。但有些模块该用户虽然具有可读权限，
但是没有更新与删除等权限，我们此系统也可以及时屏蔽该误操作功能（这是第三级）。


日常管理中的任务管理（日志，周报，月报，加班管理）等功能
主要都是增删改查关联

考勤，周志月报提交日期 都是管理员每周配置的 即使工作日期调整也不会影响考勤


技术

Web层框架对网站中所有异常的统一处理

Struts2的配置文件中配置拦截器来统一处理系统中所有的异常
定义一个拦截器，作为系统统一异常处理类

自定义异常处理器类伪代码如下：
**
 2  * 定义一个拦截器，作为系统统一异常处理类
 3  * 
 4  * @author Easong
 5  *
 6  */
 7 public class ExceptionInterceptor extends AbstractInterceptor {
 9     private static final long serialVersionUID = -3570177760250354837L;
11     @Override
12     public String intercept(ActionInvocation actionInvocation) throws Exception {
13         HttpServletRequest request = ServletActionContext.getRequest();
14         String result = null;
15         try {
16             // 向后继续执行拦截器，最终拦截器执行完成执行action，最终action返回逻辑视图名赋值给result
17             result = actionInvocation.invoke();
18         } catch (Exception e) {
19             e.printStackTrace();
21             // 进行异常处理
22             // 异常流程
23             ExceptionResultInfo exceptionResultInfo = null;
25             // 如果是自定义的异常，直接获取异常信息
26             if (e instanceof ExceptionResultInfo) {
27                 exceptionResultInfo = (ExceptionResultInfo) e;
28             } else if (e instanceof UnknownAccountException || e instanceof IncorrectCredentialsException) {
29                 ResultInfo resultInfo = ResultUtil.createFail("用户名或密码错误！");
30                 exceptionResultInfo = new ExceptionResultInfo(resultInfo);
31             } else if (e instanceof UnauthorizedException) {
32                 ResultInfo resultInfo = ResultUtil.createFail("没有权限！");
33                 exceptionResultInfo = new ExceptionResultInfo(resultInfo);
34             }


springmvc处理统一异常的方式，目前就我了解的有三种：直接使用springmvc提供的异常处理器、自己手动配置自定义全局异常处理器和使用注解
它是直接在springmvc的核心配置文件中配置springmvc自身提供的简单异常处理器。

　<!-- springmvc提供的简单异常处理器 -->
 2     <!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
 3          定义默认的异常处理页面
 4         <property name="defaultErrorView" value="/WEB-INF/jsp/exception.jsp"/>                                    
 5         定义异常处理页面用来获取异常信息的变量名，也可不定义，默认名为exception 
 6         <property name="exceptionAttribute" value="ex"/>
 7         定义需要特殊处理的异常，这是重要点 
 8         <property name="exceptionMappings">
 9             <props>
10                 <prop key="com.tgsit.cjd.model.CustomException">exception</prop>
11             </props>
12             还可以定义其他的自定义异常
13         </property>
14     </bean> -->

第二种就是自己定义一个异常处理器，然后通过在springmvc的核心配置文件中配置即可。
/**
 2  * 自定义全局异常处理器：
 3  */
 4 public class CustomExceptionResolver implements HandlerExceptionResolver {
 5     @Override
 6     public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler,
 7             Exception ex) {
 8         
 9         ex.printStackTrace();
10         CustomException customException = null;
11         //如果抛出的是自定义的异常则直接转换
12         if(ex instanceof CustomException) {
13             customException = (CustomException) ex;
14         } else {
15             //如果抛出的不是自定义的异常则重新构造一个未知错误异常
16             new SysException("系统正在维护中，请稍后重试...");
17         }
18         //向前台返回错误信息
19         ModelAndView modelAndView = new ModelAndView("exception");
20         modelAndView.addObject("message", customException.getMessage());
21         return modelAndView;
22     }
23 }
<!-- 配置自定义的全局异常处理器      只要实现HandlerExceptionResolver接口就是全局异常处理器-->
2 <bean class="com.tgsit.cjd.utils.CustomExceptionResolver"/>

最后你随便制造一个异常，不管程序运行时异常还是自定义异常，
页面跳转都会跳转到指定页面，再也不会干巴巴的给用户返回500啊、404啊那样sb的错误。
可能写的有点糙，但是主干原理都按流程给大家总结了，如有不对，望给为留言指正

